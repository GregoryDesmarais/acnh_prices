{"version":3,"sources":["API/index.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","then","res","catch","err","Object","assign","response","Main","Component","state","type","data","filter","search","month","months","componentDidMount","this","getData","API","console","log","searchChange","event","target","id","value","setState","runFilter","newFilter","item","name","toLowerCase","indexOf","includes","clearSearch","render","curMonth","Date","toLocaleString","Container","Row","Col","lg","Form","Group","controlId","Label","FormControl","onChange","as","map","i","key","className","Button","onClick","Card","Header","Body","price","location","time","j","xs","App","path","component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.383b8d44.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    getFish: () => {\r\n        return axios.get(\"/api/info/getFish\")\r\n            .then(res => res)\r\n            .catch(err => {\r\n                //Axios formats the error is such a way that you are unable to access the response data object.\r\n                //The following line will make the object accessible.\r\n                err = Object.assign({}, err);\r\n                return err.response;\r\n            })\r\n    },\r\n    getBugs: () => {\r\n        return axios.get(\"/api/info/getBugs\")\r\n            .then(res => res)\r\n            .catch(err => {\r\n                //Axios formats the error is such a way that you are unable to access the response data object.\r\n                //The following line will make the object accessible.\r\n                err = Object.assign({}, err);\r\n                return err.response;\r\n            })\r\n    },\r\n    getAll: () => {\r\n        return axios.get(\"/api/info/getAll\")\r\n            .then(res => res)\r\n            .catch(err => {\r\n                //Axios formats the error is such a way that you are unable to access the response data object.\r\n                //The following line will make the object accessible.\r\n                err = Object.assign({}, err);\r\n                return err.response;\r\n            })\r\n    },\r\n\r\n}","import React, { Component } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport API from \"../API\"\r\nimport \"./index.css\"\r\n\r\nclass Main extends Component {\r\n\r\n    state = {\r\n        type: \"Fish\",\r\n        data: [],\r\n        filter: [],\r\n        search: \"\",\r\n        month: \"\",\r\n        months: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.getData()\r\n    }\r\n\r\n    getData = () => {\r\n        API.getAll()\r\n            .then(res => {\r\n                console.log(res.data)\r\n                return\r\n                this.setState({\r\n                    data: res.data\r\n                }, () => this.runFilter())\r\n            })\r\n    }\r\n\r\n    searchChange = (event) => {\r\n        const { id, value } = event.target;\r\n        this.setState({\r\n            [id]: value\r\n        }, () => {\r\n            this.getData();\r\n            this.runFilter()\r\n        });\r\n    }\r\n\r\n    runFilter = () => {\r\n        let newFilter = this.state.data.filter(item => item.name.toLowerCase().indexOf(this.state.search.toLowerCase()) > -1)\r\n        if (this.state.month !== \"\") {\r\n            newFilter = newFilter.filter(item => item.months.includes(this.state.month))\r\n        }\r\n        this.setState({\r\n            filter: newFilter\r\n        })\r\n    }\r\n\r\n    clearSearch = () => {\r\n        this.setState({\r\n            search: \"\",\r\n            month: \"\"\r\n        }, () => this.runFilter())\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        let curDate = new Date();\r\n        let curMonth = curDate.toLocaleString('default', { month: \"short\" })\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col lg={6}>\r\n                        <Row>\r\n                            {/* <Col>\r\n                                <Form.Group controlId='type'>\r\n                                    <Form.Label>Search by Type</Form.Label>\r\n                                    <FormControl as=\"select\" onChange={this.searchChange} value={this.state.type} name='acnhsearch'>\r\n                                        <option value=\"Fish\">Fish</option>\r\n                                        <option value=\"Bugs\">Bugs</option>\r\n                                    </FormControl>\r\n                                </Form.Group>\r\n                            </Col> */}\r\n                            <Col>\r\n                                <Form.Group controlId='search'>\r\n                                    <Form.Label>Search by Name</Form.Label>\r\n                                    <FormControl onChange={this.searchChange} value={this.state.search} name='acnhsearch' />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group controlId='month'>\r\n                                    <Form.Label>Search by Month</Form.Label>\r\n                                    <FormControl as=\"select\" onChange={this.searchChange} value={this.state.month} name='acnhsearch'>\r\n                                        <option value=\"\">Select</option>\r\n                                        {this.state.months.map((month, i) => {\r\n                                            return (\r\n                                                <option key={i} value={month}>{month}</option>\r\n                                            )\r\n                                        })}\r\n                                    </FormControl>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className='text-center'>\r\n                                <Button onClick={this.clearSearch}>Clear Search</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col lg={6} className=\"results\">\r\n                        {/* <h4>{`Results: ${this.state.filter.length}`}</h4> */}\r\n                        {\r\n                            this.state.filter.map((item, i) => {\r\n                                return (\r\n                                    <Card key={i}>\r\n                                        <Card.Header><h4>{item.name}</h4></Card.Header>\r\n                                        <Card.Body>\r\n                                            <p>Price: {item.price}</p>\r\n                                            <p>Location: {item.location}</p>\r\n                                            <p>Time: {item.time}</p>\r\n                                            <p>Available:</p>\r\n                                            <Container>\r\n                                                <Row className=\"months\">\r\n                                                    {\r\n                                                        item.months.map((month, j) => {\r\n                                                            if (curMonth === month)\r\n                                                                return (<Col key={j} xs={3} className=\"curMonth\">{month}</Col>)\r\n                                                            else\r\n                                                                return (<Col key={j} xs={3}>{month}</Col>)\r\n                                                        })\r\n                                                    }\r\n                                                </Row>\r\n                                            </Container>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Col>\r\n                </Row >\r\n            </Container >\r\n        )\r\n    }\r\n}\r\nexport default Main;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Main from \"./pages\"\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/\" component={Main} />\n        </Switch>\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}